{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setcurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isCorrect, setisCorrect] = useState(false);\n\n  const formatGuess = () => {};\n\n  const addNewGuess = () => {};\n\n  const handleKeyUp = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Backspace\") {\n      setcurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setcurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n\n_s(useWordle, \"p0eKVCUcBR+urPlT6alwaHJmHEw=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/home/baraa/github/React/wordle-game/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setcurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setisCorrect","formatGuess","addNewGuess","handleKeyUp","key","prev","slice","test","length"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,SAAS,GAAIC,QAAD,IAAc;AAAA;;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;;AACA,QAAMa,WAAW,GAAG,MAAM,CAAE,CAA5B;;AAEA,QAAMC,WAAW,GAAG,MAAM,CAAE,CAA5B;;AAEA,QAAMC,WAAW,GAAG,QAAa;AAAA,QAAZ;AAAEC,MAAAA;AAAF,KAAY;;AAC/B,QAAIA,GAAG,KAAK,WAAZ,EAAyB;AACvBV,MAAAA,eAAe,CAAEW,IAAD,IAAU;AACxB,eAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACD,OAFc,CAAf;AAGD;;AACD,QAAI,aAAaC,IAAb,CAAkBH,GAAlB,CAAJ,EAA4B;AAC1B,UAAIX,YAAY,CAACe,MAAb,GAAsB,CAA1B,EAA6B;AAC3Bd,QAAAA,eAAe,CAAEW,IAAD,IAAU;AACxB,iBAAOA,IAAI,GAAGD,GAAd;AACD,SAFc,CAAf;AAGD;AACF;AACF,GAbD;;AAeA,SAAO;AACLb,IAAAA,IADK;AAELE,IAAAA,YAFK;AAGLE,IAAAA,OAHK;AAILI,IAAAA,SAJK;AAKLI,IAAAA;AALK,GAAP;AAOD,CAhCD;;GAAMd,S;;AAkCN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useWordle = (solution) => {\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setcurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [isCorrect, setisCorrect] = useState(false);\n  const formatGuess = () => {};\n\n  const addNewGuess = () => {};\n\n  const handleKeyUp = ({ key }) => {\n    if (key === \"Backspace\") {\n      setcurrentGuess((prev) => {\n        return prev.slice(0, -1);\n      });\n    }\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setcurrentGuess((prev) => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp,\n  };\n};\n\nexport default useWordle;\n"]},"metadata":{},"sourceType":"module"}