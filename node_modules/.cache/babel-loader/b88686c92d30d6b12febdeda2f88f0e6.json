{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([...Array(6)]);\n  const [history, setHistory] = useState([]);\n  const [isCorrect, setisCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: 'grey'\n      };\n    }); // find any green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solution[i] === l.key) {\n        formattedGuess[i].color = \"green\";\n        solutionArray[i] = null;\n      }\n    }); // find any yellow letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\n        formattedGuess[i].color = \"yellow\";\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedGuess;\n  };\n\n  const addNewGuess = formattedGuess => {\n    if (currentGuess === solution) {\n      setisCorrect(true);\n    }\n\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses];\n      newGuesses[turn] = formattedGuess;\n      return newGuesses;\n    });\n    setHistory(prev => {\n      return [...prev, currentGuess];\n    });\n    setTurn(prevTurn => {\n      return prevTurn + 1;\n    });\n    setCurrentGuess(\"\");\n  };\n\n  const handleKeyUp = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Enter\") {\n      if (turn > 5) {\n        console.log(\"you used all your chances\");\n        return;\n      }\n\n      if (history.includes(currentGuess)) {\n        console.log(\"word already tried\");\n        return;\n      }\n\n      if (currentGuess.length !== 5) {\n        console.log(\"word must be 5 chara long\");\n        return;\n      }\n\n      const formatted = formatGuess();\n      addNewGuess(formatted);\n    }\n\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n\n_s(useWordle, \"aHHykceFS4QOmAEPoIbc8yUmdek=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/home/baraa/github/React/wordle-game/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setisCorrect","formatGuess","solutionArray","formattedGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","prevGuesses","newGuesses","prev","prevTurn","handleKeyUp","console","log","length","formatted","slice","test"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nconst useWordle = (solution) => {\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([...Array(6)]);\n  const [history, setHistory] = useState([]);\n  const [isCorrect, setisCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution]\n    let formattedGuess = [...currentGuess].map((l) => {\n      return {key: l, color: 'grey'}\n    })\n\n\n    // find any green letters\n    formattedGuess.forEach((l, i) => {\n      if (solution[i] === l.key) {\n        formattedGuess[i].color = \"green\";\n        solutionArray[i] = null;\n      }\n    });\n\n    // find any yellow letters\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\n        formattedGuess[i].color = \"yellow\";\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n\n    return formattedGuess;\n  };\n\n  const addNewGuess = (formattedGuess) => {\n    if (currentGuess === solution) {\n      setisCorrect(true);\n    }\n\n    setGuesses((prevGuesses) => {\n      let newGuesses = [...prevGuesses];\n      newGuesses[turn] = formattedGuess;\n      return newGuesses;\n    });\n\n    setHistory((prev) => {\n      return [...prev, currentGuess];\n    });\n\n    setTurn((prevTurn) => {\n      return prevTurn + 1;\n    });\n\n    setCurrentGuess(\"\");\n  };\n\n  const handleKeyUp = ({ key }) => {\n    if (key === \"Enter\") {\n      if (turn > 5) {\n        console.log(\"you used all your chances\");\n        return;\n      }\n      if (history.includes(currentGuess)) {\n        console.log(\"word already tried\");\n        return;\n      }\n      if (currentGuess.length !== 5) {\n        console.log(\"word must be 5 chara long\");\n        return;\n      }\n\n      const formatted = formatGuess();\n      addNewGuess(formatted);\n    }\n    if (key === \"Backspace\") {\n      setCurrentGuess((prev) => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess((prev) => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp,\n  };\n};\n\nexport default useWordle;\n"]},"metadata":{},"sourceType":"module"}