{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setcurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([\"hello\"]);\n  const [isCorrect, setisCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: \"grey\"\n      };\n    }); //find any green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        formattedGuess[i].color = \"green\";\n      }\n    });\n  };\n\n  const addNewGuess = () => {};\n\n  const handleKeyUp = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Enter\") {\n      if (turn > 5) {\n        console.log(\"you used all your chances\");\n        return;\n      }\n\n      if (history.includes(currentGuess)) {\n        console.log(\"word already tried\");\n        return;\n      }\n\n      if (currentGuess.length !== 5) {\n        console.log(\"word must be 5 chara long\");\n        return;\n      }\n\n      formatGuess();\n    }\n\n    if (key === \"Backspace\") {\n      setcurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setcurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp\n  };\n};\n\n_s(useWordle, \"edVHNz10Nr4Tg7Ld/1By1Hrf1vI=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/home/baraa/github/React/wordle-game/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setcurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setisCorrect","formatGuess","solutionArray","formattedGuess","map","l","key","color","forEach","i","addNewGuess","handleKeyUp","console","log","includes","length","prev","slice","test"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,SAAS,GAAIC,QAAD,IAAc;AAAA;;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAC,OAAD,CAAD,CAAtC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;;AACA,QAAMa,WAAW,GAAG,MAAM;AACxB,QAAIC,aAAa,GAAG,CAAC,GAAGZ,QAAJ,CAApB;AACA,QAAIa,cAAc,GAAG,CAAC,GAAGV,YAAJ,EAAkBW,GAAlB,CAAuBC,CAAD,IAAO;AAChD,aAAO;AAAEC,QAAAA,GAAG,EAAED,CAAP;AAAUE,QAAAA,KAAK,EAAE;AAAjB,OAAP;AACD,KAFoB,CAArB,CAFwB,CAKxB;;AACAJ,IAAAA,cAAc,CAACK,OAAf,CAAuB,CAACH,CAAD,EAAII,CAAJ,KAAU;AAC/B,UAAIP,aAAa,CAACO,CAAD,CAAb,KAAqBJ,CAAC,CAACC,GAA3B,EAAgC;AAC9BH,QAAAA,cAAc,CAACM,CAAD,CAAd,CAAkBF,KAAlB,GAA0B,OAA1B;AACD;AACF,KAJD;AAKD,GAXD;;AAaA,QAAMG,WAAW,GAAG,MAAM,CAAE,CAA5B;;AAEA,QAAMC,WAAW,GAAG,QAAa;AAAA,QAAZ;AAAEL,MAAAA;AAAF,KAAY;;AAC/B,QAAIA,GAAG,KAAK,OAAZ,EAAqB;AACnB,UAAIf,IAAI,GAAG,CAAX,EAAc;AACZqB,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACD;;AACD,UAAIhB,OAAO,CAACiB,QAAR,CAAiBrB,YAAjB,CAAJ,EAAoC;AAClCmB,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA;AACD;;AACD,UAAIpB,YAAY,CAACsB,MAAb,KAAwB,CAA5B,EAA+B;AAC7BH,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACD;;AAEDZ,MAAAA,WAAW;AACZ;;AACD,QAAIK,GAAG,KAAK,WAAZ,EAAyB;AACvBZ,MAAAA,eAAe,CAAEsB,IAAD,IAAU;AACxB,eAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACD,OAFc,CAAf;AAGA;AACD;;AACD,QAAI,aAAaC,IAAb,CAAkBZ,GAAlB,CAAJ,EAA4B;AAC1B,UAAIb,YAAY,CAACsB,MAAb,GAAsB,CAA1B,EAA6B;AAC3BrB,QAAAA,eAAe,CAAEsB,IAAD,IAAU;AACxB,iBAAOA,IAAI,GAAGV,GAAd;AACD,SAFc,CAAf;AAGD;AACF;AACF,GA9BD;;AAgCA,SAAO;AACLf,IAAAA,IADK;AAELE,IAAAA,YAFK;AAGLE,IAAAA,OAHK;AAILI,IAAAA,SAJK;AAKLY,IAAAA;AALK,GAAP;AAOD,CA5DD;;GAAMtB,S;;AA8DN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useWordle = (solution) => {\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setcurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([]);\n  const [history, setHistory] = useState([\"hello\"]);\n  const [isCorrect, setisCorrect] = useState(false);\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map((l) => {\n      return { key: l, color: \"grey\" };\n    });\n    //find any green letters\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        formattedGuess[i].color = \"green\";\n      }\n    });\n  };\n\n  const addNewGuess = () => {};\n\n  const handleKeyUp = ({ key }) => {\n    if (key === \"Enter\") {\n      if (turn > 5) {\n        console.log(\"you used all your chances\");\n        return;\n      }\n      if (history.includes(currentGuess)) {\n        console.log(\"word already tried\");\n        return;\n      }\n      if (currentGuess.length !== 5) {\n        console.log(\"word must be 5 chara long\");\n        return;\n      }\n\n      formatGuess();\n    }\n    if (key === \"Backspace\") {\n      setcurrentGuess((prev) => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n    if (/^[A-Za-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setcurrentGuess((prev) => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyUp,\n  };\n};\n\nexport default useWordle;\n"]},"metadata":{},"sourceType":"module"}